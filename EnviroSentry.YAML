esphome:
  
  on_boot:
    priority: 600
    then:
      - lambda: |-
          uint8_t mac[6];
          esp_read_mac(mac, ESP_MAC_WIFI_STA);
          char buf[13];
          snprintf(buf, sizeof(buf),
                   "%02X%02X%02X%02X%02X%02X",
                   mac[0], mac[1], mac[2],
                   mac[3], mac[4], mac[5]);
          id(device_id) = std::string(buf);
          ESP_LOGI("setup", "Device ID set to: %s", buf);
      - mqtt.publish:
          topic: irblaster/status
          payload: !lambda 'return "online";'
          retain: true
          qos: 0

esp32:
  board: esp32-poe
  framework:
    type: esp-idf
    
# Include ArduinoJson library for JSON parsing in lambdas
esp32_ble_tracker:
  scan_parameters:
    interval: 211ms
    window: 120ms
    active: true

bluetooth_proxy:
  active: true
  connection_slots: 3

# Enable logging
logger:
  level: INFO
  baud_rate: 0  # disable logging over UART

ethernet:
    type: LAN8720 # Or LAN8270, depending on your board
    mdc_pin: GPIO23 # Adjust as needed
    mdio_pin: GPIO18 # Adjust as needed
    clk_mode: GPIO17_OUT # Adjust as needed
    phy_addr: 0 # Usually 0
    power_pin: GPIO12 # Adjust as needed, if applicable  

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_username
  password: !secret mqtt_password

  discovery: false
  
  on_message:
  - topic: irblaster/send
    qos: 0
    then:
      - lambda: |-
          esphome::json::parse_json(x, [](JsonObject root) -> bool {
            if (!root["id"].is<std::string>() || !root["code"].is<std::string>()) {
              ESP_LOGW("MQTT", "Missing or invalid 'id' or 'code' in JSON");
              return true;
            }

            std::string target = root["id"].as<std::string>();
            std::string code = root["code"].as<std::string>();

            if (target == id(device_id)) {
              ESP_LOGI("MQTT", "Device ID match. Sending IR.");
              id(ir_send_code) = code;
              id(ir_send_repeats) = root["repeats"].is<int>() ? root["repeats"].as<int>() : 1;
              id(ir_send_delay) = root["delay_ms"].is<int>() ? root["delay_ms"].as<int>() : 50;
              id(send_ir_code).execute();
            } else {
              ESP_LOGD("MQTT", "IR code not for this device (%s)", id(device_id).c_str());
            }

            return true;
          });

# Home Assistant API with custom service to send UART commands
api:
  reboot_timeout: 0s  # Optional: disables automatic reboot if HA disconnects
  services:
    - service: send_uart_command
      variables:
        cmd: string
      then:
        - uart.write:
            id: bridge_uart
            data: !lambda |-
              std::vector<uint8_t> v(cmd.begin(), cmd.end());
              v.push_back('\n');
              return v;
  

# OTA updates
ota:

- platform: esphome
  password: "2e01e0bc3af7096234637b39ea87b150"

# UART connected to Sensor Bridge
uart:
  - id: bridge_uart
    rx_pin: GPIO36
    tx_pin: GPIO4  # optional if you need TX
    baud_rate: 115200

  - id: uart_presence
    tx_pin: GPIO1 #Change to your TX pin
    rx_pin: GPIO3 #Change to your RX pin
    baud_rate: 9600

remote_transmitter:
  id: ir_tx
  pin: GPIO15  # Make sure this pin is not used elsewhere
  carrier_duty_percent: 33%

remote_receiver:
  pin: GPIO14
  dump: all
  buffer_size: 2kb
  filter: 200us
  idle: 4ms
  tolerance: 35%

binary_sensor:
  - platform: gpio
    name: Occupancy
    id: mmwave
    device_class: occupancy
    pin:
      number: GPIO35 #Change to your GPIO pin

switch:
  - platform: template
    name: mmWave sensor
    id: mmwave_sensor
    disabled_by_default: True
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_on_action:
      - uart.write: 
          id: uart_presence
          data: "sensorStart"
      - delay: 1s
    turn_off_action:
      - uart.write: 
          id: uart_presence
          data: "sensorStop"
      - delay: 1s

  - platform: template
    name: UART presence output
    id: uart_presence_output
    entity_category: config
    disabled_by_default: true
    optimistic: true
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "setUartOutput 1 1"
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: UART target output
    id: uart_target_output
    entity_category: config
    disabled_by_default: true
    optimistic: true
    assumed_state: false
    turn_on_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "setUartOutput 2 1 1 1"
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor
    turn_off_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "setUartOutput 2 0"
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "saveConfig"
      - delay: 3s
      - switch.turn_on: mmwave_sensor


number:
  - platform: template
    id: range_minimum
    name: Range (Minimum)
    icon: mdi:arrow-collapse-left
    entity_category: config
    min_value: 0
    max_value: 25
    initial_value: 0
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider

  - platform: template
    id: range_maximum
    name: Range (Maximum)
    icon: mdi:arrow-collapse-right
    entity_category: config
    min_value: 0
    max_value: 25
    initial_value: 12
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider

  - platform: template
    id: range_reduced_mmwave
    name: Range Reduced (mmWave)
    icon: mdi:arrow-collapse-horizontal
    entity_category: config
    min_value: 0
    max_value: 25
    initial_value: 0.8
    optimistic: true
    step: 0.1
    restore_value: true
    unit_of_measurement: m
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: !lambda
            std::string ms = "setRangeReduced " + to_string(x);
            return std::vector<unsigned char>(ms.begin(), ms.end());
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

#Occupancy clear delay
  - platform: template
    name: Clearance Delay (Occupancy)
    icon: mdi:clock-end
    entity_category: config
    id: mmwave_off_latency
    min_value: 1
    max_value: 600
    initial_value: 15
    optimistic: true
    step: 5
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: !lambda |-
            std::string mss = "setLatency " + to_string(id(mmwave_on_latency).state) + " " + to_string(id(mmwave_off_latency).state);
            return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

#Occupancy detection delay
  - platform: template
    name: Detection Delay (Movement)
    icon: mdi:clock-start
    id: mmwave_on_latency
    entity_category: config
    min_value: 0
    max_value: 2
    initial_value: 0
    optimistic: true
    step: 0.25
    restore_value: true
    unit_of_measurement: seconds
    mode: slider
    set_action:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: !lambda |-
            std::string mss = "setLatency " + to_string(id(mmwave_on_latency).state) + " " + to_string(id(mmwave_off_latency).state);
            return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

#Static presence detection sensitivity
  - platform: template
    name: Sensitivity (Occupancy)
    icon: mdi:target-variant
    id: sensitivity_occupancy
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 7
    optimistic: true
    step: 1
    restore_value: true

#Initial movement trigger sensitivity
  - platform: template
    name: Sensitivity (Movement)
    icon: mdi:target-variant
    id: sensitivity_movement
    entity_category: config
    min_value: 0
    max_value: 9
    initial_value: 5
    optimistic: true
    step: 1
    restore_value: true

  - platform: template
    name: "Temp. Offset"
    id: temp_offset_control
    icon: "mdi:thermometer"
    min_value: -20.0
    max_value: 20.0
    step: 0.1
    optimistic: true   # assume it worked; no feedback sensor needed
    set_action:
      - lambda: |-
            // Format the UART command into a C string
            char cmd[32];
            int len = snprintf(cmd, sizeof(cmd),
                              "SET_TEMP_OFFSET:%.2f\n", x);
            // send it over the bridge UART
            id(bridge_uart).write_str(cmd);  

# Buffer raw JSON text
globals:
  - id: json_buffer
    type: std::string
    restore_value: false
    initial_value: ""

  - id: device_id
    type: std::string
    restore_value: no
    initial_value: '"UNKNOWN"'

  - id: ir_send_code
    type: std::string
    restore_value: no
    initial_value: '""'

  - id: ir_send_repeats
    type: int
    restore_value: no
    initial_value: '1'

  - id: ir_send_delay
    type: int
    restore_value: no
    initial_value: '50'

  - id: dark_mode_enabled
    type: bool
    restore_value: true
    initial_value: 'false'

  - id: dark_mode_temp_change
    type: bool
    restore_value: no
    initial_value: 'false'


interval:
  - interval: 5000ms
    then:
      - lambda: |-
          // Read incoming bytes into buffer until newline
          uint8_t b;
          while (id(bridge_uart).available() && id(bridge_uart).read_byte(&b)) {
            if (b == '\n') {
              auto &raw = id(json_buffer);
              int pos;
              // Parse CO2
              pos = raw.find("\"co2\":");
              if (pos >= 0) id(co2_sensor).publish_state(atof(raw.substr(pos+6).c_str()));
              // Parse temp
              pos = raw.find("\"temp\":");
              if (pos >= 0) id(temp_sensor).publish_state(atof(raw.substr(pos+7).c_str()));
              // Parse hum
              pos = raw.find("\"hum\":");
              if (pos >= 0) id(hum_sensor).publish_state(atof(raw.substr(pos+6).c_str()));
              // Parse pm2_5
              pos = raw.find("\"pm2_5\":");
              if (pos >= 0) id(pm25_sensor).publish_state(atof(raw.substr(pos+8).c_str()));
              // Parse pm1
              pos = raw.find("\"pm1\":");
              if (pos >= 0) id(pm1_sensor).publish_state(atof(raw.substr(pos+8).c_str()));
              // Parse pm4
              pos = raw.find("\"pm4\":");
              if (pos >= 0) id(pm4_sensor).publish_state(atof(raw.substr(pos+8).c_str()));
              // Parse pm10
              pos = raw.find("\"pm10\":");
              if (pos >= 0) id(pm10_sensor).publish_state(atof(raw.substr(pos+8).c_str()));
              // Parse voc
              pos = raw.find("\"voc\":");
              if (pos >= 0) id(voc_sensor).publish_state(atof(raw.substr(pos+6).c_str()));
              // Parse nox
              pos = raw.find("\"nox\":");
              if (pos >= 0) id(nox_sensor).publish_state(atof(raw.substr(pos+6).c_str()));
                            // Parse lux
              pos = raw.find("\"lux\":");
              if (pos >= 0) id(lux_sensor).publish_state(atof(raw.substr(pos+6).c_str()));


                // Parse iaq (text)
                pos = raw.find("\"iaq\":");
                if (pos != std::string::npos) {
                // find opening quote of the value
                size_t start = raw.find('"', pos + 6) + 1;
                // find closing quote
                size_t end = raw.find('"', start);
                if (start != std::string::npos && end != std::string::npos && end > start) {
                std::string iaq = raw.substr(start, end - start);
                id(iaq_sensor).publish_state(iaq);
                  }
                            }
                // Parse aerosol (text)
                 pos = raw.find("\"aerosol\":");
                 if (pos != std::string::npos) {
                   // find opening quote of the value
                   size_t start = raw.find('"', pos + 10) + 1;
                   // find closing quote
                   size_t end = raw.find('"', start);
                   if (start != std::string::npos && end != std::string::npos && end > start) {
                     std::string a = raw.substr(start, end - start);
                     id(aerosol_sensor).publish_state(a);
                   }
                 }

                            raw.clear();

            } else {
              id(json_buffer) += (char)b;
            }
          }

button:
  - platform: template
    name: "Toggle Dark Mode"
    on_press:
      then:
        - lambda: |-
            id(dark_mode_enabled) = !id(dark_mode_enabled);
        - if:
            condition:
              lambda: 'return id(dark_mode_enabled);'
            then:
              - uart.write:
                  id: bridge_uart
                  data: "DARK_MODE:On\n"
            else:
              - uart.write:
                  id: bridge_uart
                  data: "DARK_MODE:Off\n"

  - platform: template
    name: "Identify"
    on_press:
      then:
        - uart.write:
            id: bridge_uart
            data: "LED_PULSE:BLUE\n"

  - platform: template
    name: "Clean Fan"
    on_press:
      then:
        - uart.write:
            id: bridge_uart
            data: "START_CLEAN\n"
 
  - platform: template
    name: "Web Interface On"
    on_press:
        then:
          - uart.write:
              id: bridge_uart
              data: "WIFI_ON\n"

  - platform: template
    name: "Web Interface Off"
    on_press:
        then:
          - uart.write:
              id: bridge_uart
              data: "WIFI_OFF\n"           

  - platform: template
    name: "Reset Temp Offset"
    on_press:
      then:
        - uart.write:
            id: bridge_uart
            data: "SET_TEMP_OFFSET:0\n"

  - platform: template
    name: "Factory Defaults"
    on_press:
      then:
        - uart.write:
            id: bridge_uart
            data: "RESET_DEFAULTS\n"

  - platform: template
    name: "Save and Reboot"
    on_press:
      then:
        - uart.write:
            id: bridge_uart
            data: "SAVE_REBOOT\n"
  
  - platform: template
    name: "Set Distance"
    id: set_distance
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: !lambda
            std::string ms = "setRange " + to_string(id(range_minimum).state) + " " + to_string(id(range_maximum).state);
            return std::vector<unsigned char>(ms.begin(), ms.end());
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor
 
  - platform: template
    name: "Set Sensitivity"
    id: set_sensitivity
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write:
          id: uart_presence
          data:
            !lambda std::string mss = "setSensitivity " + to_string(id(sensitivity_occupancy).state) + " " + to_string(id(sensitivity_movement).state);
            return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "saveConfig"
      - delay: 1s
      - switch.turn_on: mmwave_sensor

  - platform: template
    name: Restart mmWave Sensor
    id: restart_mmwave
    entity_category: config
    internal: true
    on_press:
      - uart.write: 
          id: uart_presence
          data: "resetSystem"
    
  - platform: template
    name: Factory Reset mmWave
    icon: mdi:cog-counterclockwise
    id: factory_reset_mmwave
    disabled_by_default: true
    entity_category: config
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: 
          id: uart_presence
          data: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor 
sensor:
  - platform: template
    name: "True CO2"
    id: co2_sensor
    unit_of_measurement: "ppm"

  - platform: template
    name: "Ambient Temperature"
    id: temp_sensor
    unit_of_measurement: "°C"

  - platform: template
    name: "Relative Humidity"
    id: hum_sensor
    unit_of_measurement: "%"

  - platform: template
    name: "PM2.5 Level"
    id: pm25_sensor
    unit_of_measurement: "µg/m³"

  - platform: template
    name: "PM1.0 Level"
    id: pm1_sensor
    unit_of_measurement: "µg/m³"

  - platform: template
    name: "PM4.0 Level"
    id: pm4_sensor
    unit_of_measurement: "µg/m³"

  - platform: template
    name: "PM10.0 Level"
    id: pm10_sensor
    unit_of_measurement: "µg/m³"

  - platform: template
    name: "VOC Index"
    id: voc_sensor

  - platform: template
    name: "NOx Index"
    id: nox_sensor

  - platform: template
    name: "Ambient Light"
    id: lux_sensor
    unit_of_measurement: "lux"

text_sensor:  
  - platform: template
    name: "IAQ"
    id: iaq_sensor

  - platform: template
    name: "Aerosol Detected"
    id: aerosol_sensor 

script:
  - id: send_ir_code
    mode: restart
    then:
      - lambda: |-
          id(dark_mode_temp_change) = !id(dark_mode_enabled);

      - if:
          condition:
            lambda: 'return id(dark_mode_temp_change);'
          then:
            - uart.write:
                id: bridge_uart
                data: "DARK_MODE:On\n"
            - delay: 1s
            - lambda: 'id(dark_mode_enabled) = true;'

      - repeat:
          count: !lambda 'return id(ir_send_repeats);'
          then:
            - remote_transmitter.transmit_pronto:
                data: !lambda 'return id(ir_send_code);'
            - delay: !lambda 'return id(ir_send_delay);'

      - if:
          condition:
            lambda: 'return id(dark_mode_temp_change);'
          then:
            - uart.write:
                id: bridge_uart
                data: "DARK_MODE:Off\n"
            - delay: 1s
            - lambda: 'id(dark_mode_enabled) = false;'
